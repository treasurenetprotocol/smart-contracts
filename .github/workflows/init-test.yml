name: Test Init Steps

on:
  pull_request:
    branches: [ main, develop ]

jobs:
  test-initialization:
    name: Test Foundry and Husky Initialization
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm i

      - name: Debug Environment
        run: |
          echo "HOME directory: $HOME"
          echo "Current PATH: $PATH"
          echo "Current directory: $(pwd)"

      - name: Install Foundry with verbose logging
        run: |
          # Create a temporary directory for the installer
          mkdir -p /tmp/foundry-installer
          cd /tmp/foundry-installer
          
          # Download the installer script with verbose output
          echo "Downloading Foundry installer..."
          curl -L https://foundry.paradigm.xyz -o install-foundry.sh
          
          # Examine the installer
          echo "Installer content (first 20 lines):"
          head -n 20 install-foundry.sh
          
          # Make it executable and run with verbose output
          chmod +x install-foundry.sh
          echo "Running installer with bash -x for verbose output..."
          bash -x ./install-foundry.sh
          
          # Check where foundryup was installed
          echo "Searching for foundryup:"
          find $HOME -name foundryup 2>/dev/null || echo "foundryup not found in $HOME"
          find /usr/local -name foundryup 2>/dev/null || echo "foundryup not found in /usr/local"
          
          # Try to run foundryup if found
          if [ -f "$HOME/.foundry/bin/foundryup" ]; then
            echo "Running foundryup..."
            $HOME/.foundry/bin/foundryup
          else
            echo "⚠️ foundryup not found where expected. Trying alternative location..."
            # Try to find and run foundryup from wherever it might be
            FOUNDRYUP=$(find $HOME -name foundryup -type f 2>/dev/null | head -n 1)
            if [ -n "$FOUNDRYUP" ]; then
              echo "Found foundryup at $FOUNDRYUP"
              $FOUNDRYUP
            else
              echo "❌ Could not find foundryup anywhere"
            fi
          fi
          
          # Return to original directory
          cd -

      - name: Manual Foundry Installation
        if: ${{ !success() }}
        run: |
          echo "Attempting manual Foundry installation..."
          # Create directories
          mkdir -p ~/.foundry/bin
          
          # Download binaries directly
          curl -L https://github.com/foundry-rs/foundry/releases/download/nightly/foundry_nightly_linux_amd64.tar.gz -o foundry.tar.gz
          tar -xzf foundry.tar.gz -C ~/.foundry/bin
          chmod +x ~/.foundry/bin/forge ~/.foundry/bin/cast ~/.foundry/bin/anvil
          
          echo "Manually installed Foundry binaries to ~/.foundry/bin"

      - name: Verify Foundry Location
        run: |
          echo "Looking for Foundry binaries:"
          # Check common locations
          if [ -d "$HOME/.foundry" ]; then
            echo "Contents of $HOME/.foundry:"
            ls -la $HOME/.foundry
            if [ -d "$HOME/.foundry/bin" ]; then
              echo "Contents of $HOME/.foundry/bin:"
              ls -la $HOME/.foundry/bin
            fi
          else
            echo "$HOME/.foundry directory not found"
          fi
          
          # Find all forge executables
          echo "Looking for forge executables:"
          find $HOME -name forge -type f 2>/dev/null || echo "No forge found in $HOME"
          find /usr/local -name forge -type f 2>/dev/null || echo "No forge found in /usr/local"
          
          # Find binaries in PATH
          echo "Checking PATH for forge:"
          which forge || echo "forge not in PATH"

      - name: Setup PATH for Foundry
        run: |
          # Find the forge binary (check both .foundry and .config/.foundry)
          FORGE_BIN=$(find $HOME -name forge -type f 2>/dev/null | head -n 1)
          if [ -n "$FORGE_BIN" ]; then
            echo "Found forge at $FORGE_BIN"
            FORGE_DIR=$(dirname "$FORGE_BIN")
            echo "Adding $FORGE_DIR to PATH"
            echo "$FORGE_DIR" >> $GITHUB_PATH
            
            # Also create symlinks
            sudo mkdir -p /usr/local/bin
            sudo ln -sf "$FORGE_BIN" /usr/local/bin/forge
            sudo ln -sf "$(dirname "$FORGE_BIN")/cast" /usr/local/bin/cast 2>/dev/null || true
            sudo ln -sf "$(dirname "$FORGE_BIN")/anvil" /usr/local/bin/anvil 2>/dev/null || true
            
            # Export for current step
            export PATH="$FORGE_DIR:$PATH"
            
            # Verify forge is working
            echo "Testing forge with symlink:"
            /usr/local/bin/forge --version
          else
            echo "❌ Could not find forge binary"
          fi

      - name: Install lib dependencies
        run: |
          # Create a default remappings.txt file
          echo "forge-std/=lib/forge-std/src/" > remappings.txt
          
          # Ensure lib directory exists
          mkdir -p lib
          
          # Install forge-std directly with git
          cd lib
          git clone https://github.com/foundry-rs/forge-std.git --depth 1
          cd ..
          
          echo "Installed forge-std in lib directory"

      - name: Verify Husky Installation
        run: |
          test -d .husky || (echo "Husky directory not found" && exit 1)
          test -f .husky/pre-commit || (echo "Pre-commit hook not found" && exit 1)
          test -x .husky/pre-commit || (echo "Pre-commit hook not executable" && exit 1)
          
          # Show pre-commit hook content
          echo "Pre-commit hook content:"
          cat .husky/pre-commit

      - name: Create Test Solidity File
        run: |
          echo "Creating test Solidity file"
          mkdir -p test
          cat > test/SimpleTest.sol << 'EOF'
          // SPDX-License-Identifier: GPL-3.0
          pragma solidity 0.8.29;
          import "forge-std/Test.sol";
          
          contract SimpleTest is Test {
              function testSimple() public {
                  assertTrue(true);
              }
          }
          EOF
          
          echo "Test file created:"
          cat test/SimpleTest.sol

      - name: Simulate Git Commit to Test Pre-commit Hook
        run: |
          # Set FORGE_PATH based on our search
          FORGE_BIN=$(find $HOME -name forge -type f 2>/dev/null | head -n 1 || echo "/usr/local/bin/forge")
          
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Create a simple Solidity file
          touch test-file.sol
          echo "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.29;\n\ncontract Test {}" > test-file.sol
          git add test-file.sol
          
          # Set paths for pre-commit hook
          export FORGE_PATH="$FORGE_BIN"
          export SKIP_FORGE_BUILD=1
          
          echo "Using FORGE_PATH: $FORGE_PATH"
          echo "Skip build: $SKIP_FORGE_BUILD"
          
          # Try to commit
          git commit -m "test: Add test file to verify hooks" || echo "Pre-commit hook executed with non-zero exit code" 