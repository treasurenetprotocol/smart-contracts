name: CI
on:
  push:
    branches:
      - main
      - release/**
  pull_request:
  merge_group:
permissions:
  contents: read

jobs:
  lint:
    name: Solidity Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Install Solhint
        run: npm install -g solhint

      - name: Run Solhint
        run: solhint 'contracts/**/*.sol'

  format-check:
    name: Code Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Check code format
        run: forge fmt --check

  test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      # Cache Foundry artifacts between runs
      - name: Cache Foundry build artifacts
        uses: actions/cache@v4
        with:
          path: |
            out/
            cache/
            lib/
          key: ${{ runner.os }}-foundry-${{ hashFiles('foundry.toml') }}-${{ hashFiles('contracts/**/*.sol') }}

      - name: Install Forge libraries
        run: forge install foundry-rs/forge-std

      - name: Build contracts
        run: forge build --sizes

      - name: Run tests with gas report
        run: forge test -vvv --gas-report
        id: test

      - name: Generate test coverage
        run: forge coverage --report lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./lcov.info
          fail_ci_if_error: true
          verbose: true

      - name: Upload gas report
        uses: actions/upload-artifact@v3
        with:
          name: gas-report
          path: .gas-snapshot
          if-no-files-found: ignore

  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Slither
        run: pip install slither-analyzer

      - name: Run Slither
        continue-on-error: true
        run: slither . --exclude-dependencies --json slither-report.json

      - name: Upload Slither findings
        uses: actions/upload-artifact@v3
        with:
          name: slither-report
          path: slither-report.json
          if-no-files-found: ignore

  size-check:
    name: Contract Size Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install Forge libraries
        run: forge install foundry-rs/forge-std

      - name: Build and check contract sizes
        run: |
          forge build --sizes
          forge build --sizes | grep "Contract Size:" | awk '{print $3}' | while read size; do
            if [ $size -gt 24576 ]; then
              echo "Contract exceeds EIP-170 size limit of 24KiB (24576 bytes): $size bytes"
              exit 1
            fi
          done
